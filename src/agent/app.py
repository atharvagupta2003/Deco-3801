from flask import Flask, request, jsonify
import os
import logging
from flask_cors import CORS
from graph import workflow, graph

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'txt', 'csv', 'pdf'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16 MB max file size


@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy'}), 200


def run_graph_workflow(question: str):
    """
    This function runs the graph workflow with the given question and returns the generated AI answer.

    Args:
        question (str): The question to ask the graph.

    Returns:
        str: The AI-generated answer.
    """
    inputs = {"question": question}
    output = None

    # Run the graph to process the question
    for event in graph.stream(inputs, stream_mode="values"):
        output = event  # Capture the output

    # Check if output is empty or invalid
    if not output:
        logging.error("No output received from the graph.")
        return None

    # Extract the AI-generated answer from the 'generation' part
    if 'generation' in output:
        generation = output['generation']
        return generation.content  # Return the actual content generated by the AI

    logging.error("No 'generation' found in the graph output.")
    return None

@app.route('/ask', methods=['POST'])
def ask():
    try:
        data = request.json
        if 'question' not in data:
            return jsonify({'error': 'No question provided'}), 400

        question = data['question']
        logging.info(f"Received question: {question}")

        # Use the helper function to run the graph workflow and get the AI-generated answer
        answer = run_graph_workflow(question)

        # Log the raw answer
        logging.info(f"Raw answer from graph: {answer}")

        if answer:
            # Return the AI-generated answer
            logging.info(f"Answer generated for question: {question}")
            return jsonify({'answer': answer}), 200
        else:
            logging.error(f"No answer generated. Check graph workflow.")
            return jsonify({'error': 'No answer generated by the AI.'}), 500
    except Exception as e:
        logging.error(f"Error in ask: {str(e)}")
        return jsonify({'error': f'Internal server error: {str(e)}'}), 500


if __name__ == '__main__':
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)
    app.run(debug=True, host='0.0.0.0', port=5050)